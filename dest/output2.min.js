var express=require("express"),app=express(),http=require("http").Server(app),io=require("socket.io")(http),bodyParser=require("body-parser"),cfenv=require("cfenv"),Vote=require("./vote"),mongoose=require("mongoose"),process=require("child_process"),kue=require("kue"),redis=require("redis"),winston=require("winston"),mongo=require("mongoskin"),config=require("config.json")("./public/config.json"),jobs="",Job="",appEnv=cfenv.getAppEnv(),services=appEnv.services;if(config.mongodb.uri)var databaseString=config.mongodb.uri;else{var mongodb_services=services["compose-for-mongodb"];databaseString=mongodb_services[0].credentials.uri}var db=mongo.db(databaseString),dbCollectionName=config.mongodb.collectionName;winston.add(winston.transports.File,{filename:"somefile.log"}),mongoose.connect(databaseString,function(a){a&&winston.log("error","Sorry mongodb is not connected"),a||winston.log("info","succesfully mongodb is connected")}),io.on("connection",function(a){winston.log("info","Socket connection established")});var redisConfig={redis:{port:config.redis.port,host:config.redis.hostname}};if(!config.redis.uri){var redis_services=services["compose-for-redis"];config.redis.uri=redis_services[0].credentials.uri}var client=redis.createClient(config.redis.uri);client.on("error",function(a){winston.log("error","Sorry redis server turned off. Retrying to connect")}),client.on("end",function(){winston.log("info","Redis kue disconnected")}),client.on("connect",function(a){winston.log("info","Redis kue connected"),jobs=kue.createQueue({redis:config.redis.uri}),Job=kue.Job}),app.use(bodyParser.urlencoded({extended:!0})),app.use(bodyParser.json()),app.use(express.static(__dirname+"/public")),app.use(function(a,b,c){b.header("Access-Control-Allow-Origin","*"),b.header("Access-Control-Allow-Headers","Origin, X-Requested-With, Content-Type, Accept"),c()}),app.get("/conferenceName",function(a,b){b.send(config.conferenceName)}),app.get("/vote",function(a,b){b.sendFile(__dirname+"/vote.html")}),app.get("/results",function(a,b){b.sendFile(__dirname+"/results.html")}),app.get("/api/retrieve",function(req,res){Vote.getDetails(function(err,votesInfo){if(votesInfo){response={result:votesInfo},response=JSON.stringify(response);var votes=[];for(i=0;i<config.votes.length;i++)votes.push(config.votes[i].vote);var results=[],n=4;for(i=0;i<n;i++)results[i]=0;var json=votesInfo;for(j=0;j<json.length;j++)i=votes.indexOf(json[j].vote),i>-1&&(results[i]+=1);total=eval(results[0])+eval(results[1])+eval(results[2])+eval(results[3]);var votesData=[],tempJson={};value=100/total*eval(results[0]),tempJson={result:value.toFixed(1)},votesData.push(tempJson),value=100/total*eval(results[1]),tempJson={result:value.toFixed(1)},votesData.push(tempJson),value=100/total*eval(results[2]),tempJson={result:value.toFixed(1)},votesData.push(tempJson),value=100/total*eval(results[3]),tempJson={result:value.toFixed(1)},votesData.push(tempJson);var json={result:votesData};io.emit("result",json)}else response={error:"Sorry retrieve failed"};res.send(response)})}),app.get("/api/retrieveById",function(a,b){var c=a.query.voterEmail;Vote.getVoterById(c,function(a,c){c?response={result:c}:response={error:"Sorry Try again"},b.json(JSON.stringify(response))})}),retrieve=function(req,res){db.collection(dbCollectionName),db.bind(dbCollectionName),m=function(){emit(this.vote,1)},r=function(a,b){for(count=0,count+=b[i],i=0;i<b.length;i++);return count},db.votingcollectionnews.mapReduce(m.toString(),r.toString(),{out:"coll"},function(e,c){db.collection("coll").find().toArray(function(err,result){if(result){var json=JSON.parse(JSON.stringify(result)),votes=[];for(i=0;i<config.votes.length;i++)votes.push(config.votes[i].vote);var results=[],n=4;for(i=0;i<n;i++)results[i]=0;for(j=0;j<json.length;j++)i=votes.indexOf(json[j]._id),i>-1&&(results[i]=json[j].value);total=eval(results[0])+eval(results[1])+eval(results[2])+eval(results[3]);var votesData=[],tempJson={};value=100/total*eval(results[0]),tempJson={result:value.toFixed(1)},votesData.push(tempJson),value=100/total*eval(results[1]),tempJson={result:value.toFixed(1)},votesData.push(tempJson),value=100/total*eval(results[2]),tempJson={result:value.toFixed(1)},votesData.push(tempJson),value=100/total*eval(results[3]),tempJson={result:value.toFixed(1)},votesData.push(tempJson);var json={result:votesData};io.emit("result",json)}})})},createWorker=function(a,b){var c=process.spawn("node",["task2.js"]);c.stdout.on("data",function(a){a+="",1!=a&&"1"!=a||retrieve()})},addQueue=function(a,b,c,d){jobs.create("votequeue",{emailId:a,userVote:b}).save(function(a){if(a){var b={error:"Something thing went wrong! Try again"};d.send(b)}else{createWorker(c,d);var e={result:"successfully added"};d.send(e)}})},app.post("/api/insert",function(a,b){var c=a.body.voterEmail;addQueue(c,a.body.vote,a,b)}),app.post("/api/form/insert",function(a,b){var c=a.body.voterEmail;Vote.getVoterById(c,function(c,d){if(d)response={exist:d.vote},b.json(response);else{var d={_id:a.body.voterEmail,voterEmail:a.body.voterEmail,voterName:a.body.voterName,voterSubscribe:a.body.voterSubscribe,voterOrganization:a.body.voterOrganization};Vote.addVoter(d,function(a,c){c?response={result:"Data inserted succesfully"}:response={error:a},b.json(response)})}})}),app.get("/*",function(a,b){b.sendFile(__dirname+"/public/404.html")}),http.listen(appEnv.port,"0.0.0.0",function(){console.log("listening on *:"+appEnv.port)}),module.exports=function(a){a.initConfig({watch:{scripts:{files:["*.js"],tasks:["concat","uglify","jshint"]}},uglify:{my_target:{files:{"dest/output1.min.js":["public/js/*.js"],"dest/output2.min.js":["*.js"]}}},jshint:{all:["Gruntfile.js"]},concat:{js:{src:["public/js/*.js"],dest:"build/js/scriptsjSMain.js"},css:{src:["public/css/*.css"],dest:"build/js/scriptsCSSMain.css"},themes:{src:["public/css/themes/*.css"],dest:"build/themes/scriptsThemesMain.css"},dist:{src:["app.js","task2.js","testing.js","vote.js"],dest:"build/main/scripts.js"}}}),a.loadNpmTasks("grunt-contrib-concat"),a.loadNpmTasks("grunt-contrib-watch"),a.loadNpmTasks("grunt-contrib-uglify"),a.loadNpmTasks("grunt-contrib-jshint")};var cfenv=require("cfenv"),config=require("config.json")("./public/config.json"),kue=require("kue"),express=require("express"),redis=require("redis"),Vote=require("./vote"),winston=require("winston"),mongoose=require("mongoose"),appEnv=cfenv.getAppEnv(),services=appEnv.services;if(config.mongodb.uri)var databaseString=config.mongodb.uri;else{var mongodb_services=services["compose-for-mongodb"];databaseString=mongodb_services[0].credentials.uri}mongoose.connect(databaseString);var redisConfig={redis:{port:config.redis.port,host:config.redis.hostname}};if(!config.redis.uri){var redis_services=services["compose-for-redis"];config.redis.uri=redis_services[0].credentials.uri}var client=redis.createClient(config.redis.uri);client.on("error",function(a){winston.log("error","Sorry redis server turned off. Retrying to connect in worker")}),client.on("end",function(){}),client.on("connect",function(a){var b=kue.createQueue(redisConfig);kue.Job;b.process("votequeue",1,function(a,b){var c=a.data.emailId,d={vote:a.data.userVote};Vote.updateVote(c,d,{},function(a,b){b?response=1:response=0,console.log(response)}),b()})});var request=require("request"),express=require("express"),app=express(),self=this;request.post({url:"https://api.twitter.com/oauth/request_token",oauth:{consumer_key:app.set("mbN9sXyf9cTj5kXlf2PorAgUO"),consumer_secret:app.set("A4qGMkmHQWjWjtsjF8BhmjQnxCa4pGBOMAmR2WMxSt4FtLF8OL")},form:{x_auth_mode:"reverse_auth"}},function(a,b,c){a&&console.log(500,{message:e.message}),0!==c.indexOf("OAuth")&&console.log(500,{message:"Malformed response from Twitter"}),console.log({x_reverse_auth_parameters:c})});var mongoose=require("mongoose"),config=require("config.json")("./public/config.json"),voteAppSchema=mongoose.Schema({_id:{type:String,required:!0},voterName:{type:String,required:!0},voterEmail:{type:String,required:!0},voterOrganization:{type:String,required:!0},voterSubscribe:{type:String,required:!0},vote:{type:String,required:!1},create_date:{type:Date,default:Date.now}}),database=module.exports=mongoose.model(config.mongodb.collectionName,voteAppSchema);module.exports.getDetails=function(a,b){database.find(a).limit(b)},module.exports.getVoterById=function(a,b){var c={_id:a};database.findById(c,b)},module.exports.addVoter=function(a,b){database.create(a,b)},module.exports.updateVote=function(a,b,c,d){var e={_id:a},f={vote:b.vote};database.findOneAndUpdate(e,f,c,d)};